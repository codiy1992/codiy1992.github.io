<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Notebook</title><link>https://note.codiy.net/docs/security/</link><description>Recent content in Security on Notebook</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://note.codiy.net/docs/security/index.xml" rel="self" type="application/rss+xml"/><item><title>Php Xdebug</title><link>https://note.codiy.net/docs/2022/01/php-xdebug/</link><pubDate>Tue, 18 Jan 2022 10:41:58 +0800</pubDate><guid>https://note.codiy.net/docs/2022/01/php-xdebug/</guid><description>温馨提示: 放置到公网的 PHP 环境，请务必关闭 Xdebug.
Xdebug 调试 PHP 配置 xdbeug.mode 可设置 xdebug 开启的模式. 配置 xdebug.start_with_request 可通过设置请求参数 XDEBUG_SESSION_START=phpstrom 或者设置环境变量 XDEBUG_SESSION=1 或者设置请求头信息 Cookie: XDEBUG_SESSION=start 等方式开启 xdebug 配置 xdebug.discover_client_host, 支持通过 X-Forwarded-For 头信息获取调试客户端的地址 配置 xdebug.client_host, xdebug.client_port 指定调试客户端的地址和端口 Xdebug 支持 dbgp 调试协议, 可以用来进行源码阅读, 执行 eval 指令, 开启交互式 shell 等危险操作 Xdebug 的一般配置 zend_extension=xdebug.so [xdebug] xdebug.mode=debug xdebug.start_with_request=trigger ; start only XDEBUG_SESSION or XDEBUG_TRIGGER environment varibale is set xdebug.discover_client_host=yes xdebug.client_host=host.docker.internal xdebug.client_port=9000 xdebug.idekey=VSCODE Xdebug DBGp 协议 通过阅读 DBGp 的文档，我们可以注意到一些比较敏感的命令。</description></item><item><title>Exploiting PHP deserialization And SSRF</title><link>https://note.codiy.net/docs/2021/02/php-deserialization-and-ssrf-exploiting/</link><pubDate>Sat, 27 Feb 2021 09:16:52 +0800</pubDate><guid>https://note.codiy.net/docs/2021/02/php-deserialization-and-ssrf-exploiting/</guid><description>1 - 反序列化利用链 1.1 基础知识和原理 反序列化会从给定的序列化串来还原对象,并调用 __wakeup 来做唤醒工作, 而不调用 __construct 来初始化对象 还原的对象会带上序列化时指定的属性, 这部分可被利用来作为恶意代码输入点. 恶意代码仅放在属性中并不会被执行, 所以一般利用 __destruct 在对象销毁的时候,通过巧妙构造传递属性来让恶意代码被执行, 这中间可能还需要借助其他类对象. 因此, 只要存在受用户控制的反序列化入口, 即可通过特别构造的序列化串来达到搞事情的目的. 1.2 利用形式(反序列化入口) 直接调用反序列化函数, unserialize(base64_decode($_POST['serialized_string'])); 下列函数在载入phar 时候也会触发反序列化, 如 is_dir('phar://phar.gif') column1 column2 column3 column4 column5 column6 fileatime filectime filemtime file_exists file_get_contents file_put_contents file filegroup fopen fileinode fileowner fileperms is_dir is_file is_link is_executable is_readable is_writeable is_wirtble parse_ini_file copy unlink stat readfile phar 文件本地生成需 php.</description></item></channel></rss>